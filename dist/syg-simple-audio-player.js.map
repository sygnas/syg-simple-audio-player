{"version":3,"file":"syg-simple-audio-player.js","sources":["../node_modules/syg-audio-src/src/check/hds.js","../node_modules/syg-audio-src/src/check/hls.js","../node_modules/syg-audio-src/src/check/mse.js","../node_modules/syg-audio-src/src/index.js","../src/index.js"],"sourcesContent":["/**\r\n * HDSを再生できるか\r\n * @param {Audio} audio\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\nexport default function is_can_play_hds(audio) {\r\n  return audio.canPlayType('application/f4m+xml') === 'maybe';\r\n}\r\n","\r\n/**\r\n * HLSを再生できるか\r\n * @param {Audio} audio\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\nexport default function is_can_play_hls(audio) {\r\n  return audio.canPlayType('application/vnd.apple.mpegURL') === 'maybe';\r\n}\r\n","\r\n/** ************\r\n * MediaSourceExtensionに対応しているか\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\n/* eslint no-void:[\"off\"] */\r\n\r\nexport default function is_support_mse() {\r\n  const hasWebKit = (window.WebKitMediaSource !== null && window.WebKitMediaSource !== void 0);\r\n  const hasMediaSource = (window.MediaSource !== null && window.MediaSource !== void 0);\r\n  return (hasWebKit || hasMediaSource);\r\n}\r\n","/**\r\n * ユーザー環境をチェックして、HDS / HLS / dash.js のソースを HTML5 Audio にセットする\r\n * MPEG-DASHを使う場合は dash.js が必要。\r\n *\r\n *\r\n * @author   Hiroshi Fukuda <info.sygnas@gmail.com>\r\n * @license  MIT\r\n */\r\n\r\n/* globals dashjs */\r\n\r\nimport check_hds from './check/hds';\r\nimport check_hls from './check/hls';\r\nimport check_mse from './check/mse';\r\n\r\n\r\nexport default class {\r\n  /**\r\n   * コンストラクタ\r\n   * @param {Object} config インスタンス設定。this.defaults 参照\r\n   */\r\n  constructor(config) {\r\n    // オーディオソースのタイプ定数\r\n    this.TYPE_HDS = 'hds';\r\n    this.TYPE_HLS = 'hls';\r\n    this.TYPE_MSE = 'mse';\r\n    this.TYPE_FILE = 'file';\r\n\r\n    // デフォルト設定\r\n    const defaults = {\r\n      hds: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.f4m',\r\n      },\r\n      hls: {\r\n        protcol: 'http://',\r\n        playlist: '/playlist.m3u8',\r\n      },\r\n      mse: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.mpd',\r\n        autoplay: false,\r\n      },\r\n    };\r\n    // 設定反映\r\n    this.opt = Object.assign(defaults, config);\r\n\r\n    this.audio = new Audio(); // HTML5 Audio\r\n    this.dash_player = null; // dash.js のインスタンス\r\n    this.is_support_hds = false; // HDSを再生できるか\r\n    this.is_support_hls = false; // HLSを再生できるか\r\n    this.is_support_mse = false; // MedisSourceExtensionに対応しているか\r\n    this.now_type = null; // ソースとして設定されたタイプ。TYPE_HDS ... TYPE_FILE などが入る\r\n  }\r\n\r\n  /**\r\n   * サポート環境チェック\r\n   * @return {Boolean} true: チェック完了 / false: 対象外環境\r\n   */\r\n  check_support() {\r\n    try {\r\n      this.is_support_hds = check_hds(this.audio); // HDSを再生できるか\r\n      this.is_support_hls = check_hls(this.audio); // HLSを再生できるか\r\n      this.is_support_mse = check_mse(this.audio); // MedisSourceExtensionに対応しているか\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * オーディオソースを渡してHTML5 Audioにセットする\r\n   * @param {String} url\r\n   * mp3/ogg など非ストリーミングの場合はファイルのURL。\r\n   * ストリーミングの場合は http://\b{この部分}//manifest.f4m をベースURLとして渡す\r\n   * @param {String} type\r\n   * タイプを指定したい時は TYPE_HDS などを渡す。\r\n   * 非ストリーミングの場合は TYPE_FILE を必ず渡す。\r\n   */\r\n  set_src(url, type = null) {\r\n    if (type === this.TYPE_FILE) {\r\n      return this.$_set_src_file(url);\r\n    } else if (type === this.TYPE_HLS) {\r\n      return this.$_set_src_hls(url);\r\n    } else if (type === this.TYPE_HDS) {\r\n      return this.$_set_src_hds(url);\r\n    } else if (type === this.TYPE_MSE) {\r\n      return this.$_set_src_mse(url);\r\n    } else if (this.is_support_hls) {\r\n      return this.$_set_src_hls(url);\r\n    } else if (this.is_support_hds) {\r\n      return this.$_set_src_hds(url);\r\n    } else if (this.is_support_mse) {\r\n      return this.$_set_src_mse(url);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * private\r\n   */\r\n\r\n  /**\r\n   * 非ストリーミングでセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_file(url) {\r\n    this.audio.src = url;\r\n    this.now_type = this.TYPE_FILE;\r\n    return true;\r\n  }\r\n  /**\r\n   * HLS形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_hls(url) {\r\n    if (!this.is_support_hls) return false;\r\n\r\n    this.audio.src = this.opt.hls.protcol + url + this.opt.hls.playlist;\r\n    this.now_type = this.TYPE_HLS;\r\n    return true;\r\n  }\r\n  /**\r\n   * HDS形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_hds(url) {\r\n    if (!this.is_support_hds) return false;\r\n\r\n    this.audio.src = this.opt.hds.protcol + url + this.opt.hds.playlist;\r\n    this.now_type = this.TYPE_HDS;\r\n    return true;\r\n  }\r\n  /**\r\n   * MSE形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_mse(url) {\r\n    if (!this.is_support_mse) return false;\r\n\r\n    // dash.js を使う\r\n    this.now_type = this.TYPE_MSE;\r\n    const src = this.opt.mse.protcol + url + this.opt.mse.playlist;\r\n\r\n    if (this.dash_player === null) {\r\n      this.dash_player = dashjs.MediaPlayer().create();\r\n      this.dash_player.initialize(this.audio, src, this.opt.mse.autoplay);\r\n    } else {\r\n      this.dash_player.attachSource(src);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","/**\r\n * オーディオ再生・停止だけを管理するボタン\r\n *\r\n * @author   Hiroshi Fukuda <info.sygnas@gmail.com>\r\n * @license  MIT\r\n */\r\n\r\nimport AudioSrc from 'syg-audio-src';\r\n\r\n\r\nexport default class {\r\n  /**\r\n   * コンストラクタ\r\n   * @param {Object} config インスタンス設定。this.defaults 参照\r\n   */\r\n  constructor(target, audio, config) {\r\n    // ターゲットボタンの data-audio-status属性に入れる状態\r\n    this.STATE_PLAY = 'play';\r\n    this.STATE_PAUSE = 'pause';\r\n    this.STATE_STOP = 'stop';\r\n\r\n    // デフォルト設定\r\n    const defaults = {\r\n      // オーディオソースを指定する属性\r\n      attr_src: 'data-audio-src',\r\n      // 状態を格納する属性\r\n      attr_status: 'data-audio-status',\r\n      // ソースのタイプを指定する属性 {file / hds / hls / mse}\r\n      attr_type: 'data-audio-type',\r\n\r\n      // 以下、syg-audio-src の設定\r\n      hds: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.f4m',\r\n      },\r\n      hls: {\r\n        protcol: 'http://',\r\n        playlist: '/playlist.m3u8',\r\n      },\r\n      mse: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.mpd',\r\n        autoplay: false,\r\n      },\r\n    };\r\n    // 設定反映\r\n    this.opt = Object.assign(defaults, config);\r\n\r\n    // 再生中か\r\n    this.is_playing = false;\r\n    // 現在再生中のボタンエレメント\r\n    this.now_playing_btn = null;\r\n    // ボタンエレメント\r\n    this.targets = document.querySelectorAll(target);\r\n    // オーディオソース\r\n    this.audio_src = new AudioSrc({\r\n      hds: this.opt.hds,\r\n      hls: this.opt.hls,\r\n      mse: this.opt.mse,\r\n    });\r\n    // イベント設定\r\n    this.$_init_event();\r\n  }\r\n\r\n  /**\r\n   * 停止\r\n   */\r\n  stop() {\r\n    this.$_stop();\r\n  }\r\n\r\n\r\n  /**\r\n   * private\r\n   */\r\n\r\n  /**\r\n   * イベント設定\r\n   */\r\n  $_init_event() {\r\n    // ボタンのイベント\r\n    get_node_array(this.targets).forEach((elm) => {\r\n      elm.addEventListener('click', this.$_on_btn_click.bind(this));\r\n    });\r\n    // 再生終了イベント\r\n    this.audio_src.audio.addEventListener('ended', this.$_stop.bind(this));\r\n  }\r\n\r\n  /**\r\n   * ボタンをクリックした\r\n   * @param {Event} ev クリックイベント\r\n   */\r\n  $_on_btn_click(ev) {\r\n    ev.preventDefault();\r\n\r\n    // now_playing_btn とクリックされたボタンが同一なら一時停止\r\n    if (ev.target === this.now_playing_btn) {\r\n      this.$_pause(ev.target);\r\n    } else {\r\n      this.$_play_new(ev.target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 停止\r\n   */\r\n  $_stop() {\r\n    this.audio_src.audio.pause();\r\n    this.audio_src.audio.currentTime = 0;\r\n    // ステータスを変更\r\n    this.$_change_state(this.STATE_STOP, this.now_playing_btn);\r\n    // 再生中ボタンの変更\r\n    this.now_playing_btn = null;\r\n  }\r\n\r\n  /**\r\n   * 一時停止・再開\r\n   * @param {HTMLElement} target クリックしたボタン\r\n   */\r\n  $_pause(target) {\r\n    if (this.is_playing) {\r\n      this.audio_src.audio.pause();\r\n      this.$_change_state(this.STATE_PAUSE, target);\r\n    } else {\r\n      this.audio_src.audio.play();\r\n      this.$_change_state(this.STATE_PLAY, target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 再生\r\n   * @param {HTMLElement} target クリックしたボタン\r\n   */\r\n  $_play_new(target) {\r\n    const opt = this.opt;\r\n    const audio_src = this.audio_src;\r\n\r\n    // 既に再生していたら止める\r\n    if (this.now_playing_btn) {\r\n      audio_src.audio.pause();\r\n      this.$_change_state(this.STATE_STOP, this.now_playing_btn);\r\n    }\r\n\r\n    // オーディオソースURL\r\n    const url = target.getAttribute(opt.attr_src);\r\n    // ソースタイプ\r\n    const type = target.getAttribute(opt.attr_type);\r\n\r\n    // ・data-audio-type属性が file だったら非ストリーミング\r\n    // ・上記属性が null で、サポート環境チェックが問題なければ\r\n    //   ストリーミング種別自動判定\r\n    // ・hds / hls / mse を指定したストリーミング\r\n    // ・それ以外はエラー\r\n    if (type === audio_src.TYPE_FILE) {\r\n      audio_src.set_src(url, audio_src.TYPE_FILE);\r\n    } else if (type === null && this.audio_src.check_support()) {\r\n      audio_src.set_src(url);\r\n    } else if (\r\n      type === audio_src.TYPE_HDS ||\r\n      type === audio_src.TYPE_HLS ||\r\n      type === audio_src.TYPE_MSE) {\r\n      audio_src.set_src(url, type);\r\n    } else {\r\n      const err = new Error();\r\n      err.message = 'not supported type.';\r\n      throw err;\r\n    }\r\n\r\n    // ソースをロードして再生\r\n    audio_src.audio.load();\r\n    audio_src.audio.play();\r\n\r\n    // 再生中ボタンの変更\r\n    this.now_playing_btn = target;\r\n    // ステータスを変更\r\n    this.$_change_state(this.STATE_PLAY, target);\r\n  }\r\n\r\n  /**\r\n   * 任意のエレメントのステータスを変更\r\n   * @param {String} state ステータス。this.STATE_PLAY などが入る\r\n   * @param {HTMLElement} elm 対象となるボタン\r\n   */\r\n  $_change_state(state, elm) {\r\n    if (state === this.STATE_PLAY) {\r\n      this.is_playing = true;\r\n    } else if (state === this.STATE_PAUSE || state === this.STATE_STOP) {\r\n      this.is_playing = false;\r\n    }\r\n\r\n    if (elm) {\r\n      elm.setAttribute(this.opt.attr_status, state);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * NodeListをArrayとして取り出す（IE対策）\r\n */\r\nfunction get_node_array(node_list) {\r\n  return Array.prototype.slice.call(node_list, 0);\r\n}\r\n"],"names":["is_can_play_hds","audio","canPlayType","is_can_play_hls","is_support_mse","hasWebKit","window","WebKitMediaSource","hasMediaSource","MediaSource","config","TYPE_HDS","TYPE_HLS","TYPE_MSE","TYPE_FILE","defaults","opt","Object","assign","Audio","dash_player","is_support_hds","is_support_hls","now_type","check_hds","check_hls","check_mse","e","url","type","$_set_src_file","$_set_src_hls","$_set_src_hds","$_set_src_mse","src","hls","protcol","playlist","hds","mse","dashjs","MediaPlayer","create","initialize","autoplay","attachSource","target","STATE_PLAY","STATE_PAUSE","STATE_STOP","is_playing","now_playing_btn","targets","document","querySelectorAll","audio_src","AudioSrc","$_init_event","$_stop","forEach","elm","addEventListener","$_on_btn_click","bind","ev","preventDefault","$_pause","$_play_new","pause","currentTime","$_change_state","play","getAttribute","attr_src","attr_type","set_src","check_support","err","Error","message","load","state","setAttribute","attr_status","get_node_array","node_list","Array","prototype","slice","call"],"mappings":"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"}