{"version":3,"file":"syg-simple-audio-player.min.js","sources":["../node_modules/syg-audio-src/src/index.js","../node_modules/syg-audio-src/src/check/hds.js","../node_modules/syg-audio-src/src/check/hls.js","../node_modules/syg-audio-src/src/check/mse.js","../src/index.js"],"sourcesContent":["/**\r\n * ユーザー環境をチェックして、HDS / HLS / dash.js のソースを HTML5 Audio にセットする\r\n * MPEG-DASHを使う場合は dash.js が必要。\r\n *\r\n *\r\n * @author   Hiroshi Fukuda <info.sygnas@gmail.com>\r\n * @license  MIT\r\n */\r\n\r\n/* globals dashjs */\r\n\r\nimport check_hds from './check/hds';\r\nimport check_hls from './check/hls';\r\nimport check_mse from './check/mse';\r\n\r\n\r\nexport default class {\r\n  /**\r\n   * コンストラクタ\r\n   * @param {Object} config インスタンス設定。this.defaults 参照\r\n   */\r\n  constructor(config) {\r\n    // オーディオソースのタイプ定数\r\n    this.TYPE_HDS = 'hds';\r\n    this.TYPE_HLS = 'hls';\r\n    this.TYPE_MSE = 'mse';\r\n    this.TYPE_FILE = 'file';\r\n\r\n    // デフォルト設定\r\n    const defaults = {\r\n      hds: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.f4m',\r\n      },\r\n      hls: {\r\n        protcol: 'http://',\r\n        playlist: '/playlist.m3u8',\r\n      },\r\n      mse: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.mpd',\r\n        autoplay: false,\r\n      },\r\n    };\r\n    // 設定反映\r\n    this.opt = Object.assign(defaults, config);\r\n\r\n    this.audio = new Audio(); // HTML5 Audio\r\n    this.dash_player = null; // dash.js のインスタンス\r\n    this.is_support_hds = false; // HDSを再生できるか\r\n    this.is_support_hls = false; // HLSを再生できるか\r\n    this.is_support_mse = false; // MedisSourceExtensionに対応しているか\r\n    this.now_type = null; // ソースとして設定されたタイプ。TYPE_HDS ... TYPE_FILE などが入る\r\n  }\r\n\r\n  /**\r\n   * サポート環境チェック\r\n   * @return {Boolean} true: チェック完了 / false: 対象外環境\r\n   */\r\n  check_support() {\r\n    try {\r\n      this.is_support_hds = check_hds(this.audio); // HDSを再生できるか\r\n      this.is_support_hls = check_hls(this.audio); // HLSを再生できるか\r\n      this.is_support_mse = check_mse(this.audio); // MedisSourceExtensionに対応しているか\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * オーディオソースを渡してHTML5 Audioにセットする\r\n   * @param {String} url\r\n   * mp3/ogg など非ストリーミングの場合はファイルのURL。\r\n   * ストリーミングの場合は http://\b{この部分}//manifest.f4m をベースURLとして渡す\r\n   * @param {String} type\r\n   * タイプを指定したい時は TYPE_HDS などを渡す。\r\n   * 非ストリーミングの場合は TYPE_FILE を必ず渡す。\r\n   */\r\n  set_src(url, type = null) {\r\n    if (type === this.TYPE_FILE) {\r\n      return this.$_set_src_file(url);\r\n    } else if (type === this.TYPE_HLS) {\r\n      return this.$_set_src_hls(url);\r\n    } else if (type === this.TYPE_HDS) {\r\n      return this.$_set_src_hds(url);\r\n    } else if (type === this.TYPE_MSE) {\r\n      return this.$_set_src_mse(url);\r\n    } else if (this.is_support_hls) {\r\n      return this.$_set_src_hls(url);\r\n    } else if (this.is_support_hds) {\r\n      return this.$_set_src_hds(url);\r\n    } else if (this.is_support_mse) {\r\n      return this.$_set_src_mse(url);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * private\r\n   */\r\n\r\n  /**\r\n   * 非ストリーミングでセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_file(url) {\r\n    this.audio.src = url;\r\n    this.now_type = this.TYPE_FILE;\r\n    return true;\r\n  }\r\n  /**\r\n   * HLS形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_hls(url) {\r\n    if (!this.is_support_hls) return false;\r\n\r\n    this.audio.src = this.opt.hls.protcol + url + this.opt.hls.playlist;\r\n    this.now_type = this.TYPE_HLS;\r\n    return true;\r\n  }\r\n  /**\r\n   * HDS形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_hds(url) {\r\n    if (!this.is_support_hds) return false;\r\n\r\n    this.audio.src = this.opt.hds.protcol + url + this.opt.hds.playlist;\r\n    this.now_type = this.TYPE_HDS;\r\n    return true;\r\n  }\r\n  /**\r\n   * MSE形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_mse(url) {\r\n    if (!this.is_support_mse) return false;\r\n\r\n    // dash.js を使う\r\n    this.now_type = this.TYPE_MSE;\r\n    const src = this.opt.mse.protcol + url + this.opt.mse.playlist;\r\n\r\n    if (this.dash_player === null) {\r\n      this.dash_player = dashjs.MediaPlayer().create();\r\n      this.dash_player.initialize(this.audio, src, this.opt.mse.autoplay);\r\n    } else {\r\n      this.dash_player.attachSource(src);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","/**\r\n * HDSを再生できるか\r\n * @param {Audio} audio\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\nexport default function is_can_play_hds(audio) {\r\n  return audio.canPlayType('application/f4m+xml') === 'maybe';\r\n}\r\n","\r\n/**\r\n * HLSを再生できるか\r\n * @param {Audio} audio\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\nexport default function is_can_play_hls(audio) {\r\n  return audio.canPlayType('application/vnd.apple.mpegURL') === 'maybe';\r\n}\r\n","\r\n/** ************\r\n * MediaSourceExtensionに対応しているか\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\n/* eslint no-void:[\"off\"] */\r\n\r\nexport default function is_support_mse() {\r\n  const hasWebKit = (window.WebKitMediaSource !== null && window.WebKitMediaSource !== void 0);\r\n  const hasMediaSource = (window.MediaSource !== null && window.MediaSource !== void 0);\r\n  return (hasWebKit || hasMediaSource);\r\n}\r\n","/**\r\n * オーディオ再生・停止だけを管理するボタン\r\n *\r\n * @author   Hiroshi Fukuda <info.sygnas@gmail.com>\r\n * @license  MIT\r\n */\r\n\r\nimport AudioSrc from 'syg-audio-src';\r\n\r\n\r\nexport default class {\r\n  /**\r\n   * コンストラクタ\r\n   * @param {Object} config インスタンス設定。this.defaults 参照\r\n   */\r\n  constructor(target, audio, config) {\r\n    // ターゲットボタンの data-audio-status属性に入れる状態\r\n    this.STATE_PLAY = 'play';\r\n    this.STATE_PAUSE = 'pause';\r\n    this.STATE_STOP = 'stop';\r\n\r\n    // デフォルト設定\r\n    const defaults = {\r\n      // オーディオソースを指定する属性\r\n      attr_src: 'data-audio-src',\r\n      // 状態を格納する属性\r\n      attr_status: 'data-audio-status',\r\n      // ソースのタイプを指定する属性 {file / hds / hls / mse}\r\n      attr_type: 'data-audio-type',\r\n\r\n      // 以下、syg-audio-src の設定\r\n      hds: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.f4m',\r\n      },\r\n      hls: {\r\n        protcol: 'http://',\r\n        playlist: '/playlist.m3u8',\r\n      },\r\n      mse: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.mpd',\r\n        autoplay: false,\r\n      },\r\n    };\r\n    // 設定反映\r\n    this.opt = Object.assign(defaults, config);\r\n\r\n    // 再生中か\r\n    this.is_playing = false;\r\n    // 現在再生中のボタンエレメント\r\n    this.now_playing_btn = null;\r\n    // ボタンエレメント\r\n    this.targets = document.querySelectorAll(target);\r\n    // オーディオソース\r\n    this.audio_src = new AudioSrc({\r\n      hds: this.opt.hds,\r\n      hls: this.opt.hls,\r\n      mse: this.opt.mse,\r\n    });\r\n    // イベント設定\r\n    this.$_init_event();\r\n  }\r\n\r\n  /**\r\n   * 停止\r\n   */\r\n  stop() {\r\n    this.$_stop();\r\n  }\r\n\r\n\r\n  /**\r\n   * private\r\n   */\r\n\r\n  /**\r\n   * イベント設定\r\n   */\r\n  $_init_event() {\r\n    // ボタンのイベント\r\n    get_node_array(this.targets).forEach((elm) => {\r\n      elm.addEventListener('click', this.$_on_btn_click.bind(this));\r\n    });\r\n    // 再生終了イベント\r\n    this.audio_src.audio.addEventListener('ended', this.$_stop.bind(this));\r\n  }\r\n\r\n  /**\r\n   * ボタンをクリックした\r\n   * @param {Event} ev クリックイベント\r\n   */\r\n  $_on_btn_click(ev) {\r\n    ev.preventDefault();\r\n\r\n    // now_playing_btn とクリックされたボタンが同一なら一時停止\r\n    if (ev.target === this.now_playing_btn) {\r\n      this.$_pause(ev.target);\r\n    } else {\r\n      this.$_play_new(ev.target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 停止\r\n   */\r\n  $_stop() {\r\n    this.audio_src.audio.pause();\r\n    this.audio_src.audio.currentTime = 0;\r\n    // ステータスを変更\r\n    this.$_change_state(this.STATE_STOP, this.now_playing_btn);\r\n    // 再生中ボタンの変更\r\n    this.now_playing_btn = null;\r\n  }\r\n\r\n  /**\r\n   * 一時停止・再開\r\n   * @param {HTMLElement} target クリックしたボタン\r\n   */\r\n  $_pause(target) {\r\n    if (this.is_playing) {\r\n      this.audio_src.audio.pause();\r\n      this.$_change_state(this.STATE_PAUSE, target);\r\n    } else {\r\n      this.audio_src.audio.play();\r\n      this.$_change_state(this.STATE_PLAY, target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 再生\r\n   * @param {HTMLElement} target クリックしたボタン\r\n   */\r\n  $_play_new(target) {\r\n    const opt = this.opt;\r\n    const audio_src = this.audio_src;\r\n\r\n    // 既に再生していたら止める\r\n    if (this.now_playing_btn) {\r\n      audio_src.audio.pause();\r\n      this.$_change_state(this.STATE_STOP, this.now_playing_btn);\r\n    }\r\n\r\n    // オーディオソースURL\r\n    const url = target.getAttribute(opt.attr_src);\r\n    // ソースタイプ\r\n    const type = target.getAttribute(opt.attr_type);\r\n\r\n    // ・data-audio-type属性が file だったら非ストリーミング\r\n    // ・上記属性が null で、サポート環境チェックが問題なければ\r\n    //   ストリーミング種別自動判定\r\n    // ・hds / hls / mse を指定したストリーミング\r\n    // ・それ以外はエラー\r\n    if (type === audio_src.TYPE_FILE) {\r\n      audio_src.set_src(url, audio_src.TYPE_FILE);\r\n    } else if (type === null && this.audio_src.check_support()) {\r\n      audio_src.set_src(url);\r\n    } else if (\r\n      type === audio_src.TYPE_HDS ||\r\n      type === audio_src.TYPE_HLS ||\r\n      type === audio_src.TYPE_MSE) {\r\n      audio_src.set_src(url, type);\r\n    } else {\r\n      const err = new Error();\r\n      err.message = 'not supported type.';\r\n      throw err;\r\n    }\r\n\r\n    // ソースをロードして再生\r\n    audio_src.audio.load();\r\n    audio_src.audio.play();\r\n\r\n    // 再生中ボタンの変更\r\n    this.now_playing_btn = target;\r\n    // ステータスを変更\r\n    this.$_change_state(this.STATE_PLAY, target);\r\n  }\r\n\r\n  /**\r\n   * 任意のエレメントのステータスを変更\r\n   * @param {String} state ステータス。this.STATE_PLAY などが入る\r\n   * @param {HTMLElement} elm 対象となるボタン\r\n   */\r\n  $_change_state(state, elm) {\r\n    if (state === this.STATE_PLAY) {\r\n      this.is_playing = true;\r\n    } else if (state === this.STATE_PAUSE || state === this.STATE_STOP) {\r\n      this.is_playing = false;\r\n    }\r\n\r\n    if (elm) {\r\n      elm.setAttribute(this.opt.attr_status, state);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * NodeListをArrayとして取り出す（IE対策）\r\n */\r\nfunction get_node_array(node_list) {\r\n  return Array.prototype.slice.call(node_list, 0);\r\n}\r\n"],"names":["config","TYPE_HDS","TYPE_HLS","TYPE_MSE","TYPE_FILE","opt","Object","assign","audio","Audio","dash_player","is_support_hds","is_support_hls","is_support_mse","now_type","canPlayType","check_hds","this","check_hls","hasWebKit","window","WebKitMediaSource","hasMediaSource","MediaSource","check_mse","e","url","type","$_set_src_file","$_set_src_hls","$_set_src_hds","$_set_src_mse","src","hls","protcol","playlist","hds","mse","dashjs","MediaPlayer","create","initialize","autoplay","attachSource","target","STATE_PLAY","STATE_PAUSE","STATE_STOP","is_playing","now_playing_btn","targets","document","querySelectorAll","audio_src","AudioSrc","$_init_event","$_stop","node_list","Array","prototype","slice","call","forEach","elm","addEventListener","_this","$_on_btn_click","bind","ev","preventDefault","$_pause","$_play_new","pause","currentTime","$_change_state","play","getAttribute","attr_src","attr_type","set_src","check_support","err","Error","message","load","state","setAttribute","attr_status"],"mappings":"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"}